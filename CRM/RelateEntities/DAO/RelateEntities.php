<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2019
 *
 * Generated from /Users/pradeep/Sites/drupal7/sites/all/extensions/com.megaphonetech.relateentities/xml/schema/CRM/RelateEntities/RelateEntities.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:0aed23f92f04bbba15d37ebab3346963)
 */

/**
 * Database access object for the RelateEntities entity.
 */
class CRM_RelateEntities_DAO_RelateEntities extends CRM_Core_DAO {

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_relate_entities';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique Related Entity ID
   *
   * @var int
   */
  public $id;

  /**
   * May contain civicrm_financial_item, civicrm_contribution, civicrm_financial_trxn, civicrm_grant, etc
   *
   * @var string
   */
  public $entity_table_a;

  /**
   * entry in table
   *
   * @var int
   */
  public $entity_id_a;

  /**
   * May contain civicrm_financial_item, civicrm_contribution, civicrm_financial_trxn, civicrm_grant, etc
   *
   * @var string
   */
  public $entity_table_b;

  /**
   * entry in table
   *
   * @var int
   */
  public $entity_id_b;

  /**
   * id of the relationship
   *
   * @var int
   */
  public $relationship_type_id;

  /**
   * is the relationship active ?
   *
   * @var bool
   */
  public $is_active;

  /**
   * When was the entry was created.
   *
   * @var timestamp
   */
  public $created_date;

  /**
   * When was the entry was modified.
   *
   * @var timestamp
   */
  public $modified_date;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_relate_entities';
    parent::__construct();
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'relationship_type_id', 'civicrm_relationship_type', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Dynamic(self::getTableName(), 'entity_id_a', NULL, 'id', 'entity_table_a');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Dynamic(self::getTableName(), 'entity_id_b', NULL, 'id', 'entity_table_b');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => CRM_RelateEntities_ExtensionUtil::ts('Unique Related Entity ID'),
          'required' => TRUE,
          'where' => 'civicrm_relate_entities.id',
          'table_name' => 'civicrm_relate_entities',
          'entity' => 'RelateEntities',
          'bao' => 'CRM_RelateEntities_DAO_RelateEntities',
          'localizable' => 0,
        ],
        'entity_table_a' => [
          'name' => 'entity_table_a',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => CRM_RelateEntities_ExtensionUtil::ts('Entity Table A'),
          'description' => CRM_RelateEntities_ExtensionUtil::ts('May contain civicrm_financial_item, civicrm_contribution, civicrm_financial_trxn, civicrm_grant, etc'),
          'required' => TRUE,
          'maxlength' => 64,
          'size' => CRM_Utils_Type::BIG,
          'where' => 'civicrm_relate_entities.entity_table_a',
          'table_name' => 'civicrm_relate_entities',
          'entity' => 'RelateEntities',
          'bao' => 'CRM_RelateEntities_DAO_RelateEntities',
          'localizable' => 0,
        ],
        'entity_id_a' => [
          'name' => 'entity_id_a',
          'type' => CRM_Utils_Type::T_INT,
          'title' => CRM_RelateEntities_ExtensionUtil::ts('Entity Id A'),
          'description' => CRM_RelateEntities_ExtensionUtil::ts('entry in table'),
          'required' => TRUE,
          'where' => 'civicrm_relate_entities.entity_id_a',
          'table_name' => 'civicrm_relate_entities',
          'entity' => 'RelateEntities',
          'bao' => 'CRM_RelateEntities_DAO_RelateEntities',
          'localizable' => 0,
        ],
        'entity_table_b' => [
          'name' => 'entity_table_b',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => CRM_RelateEntities_ExtensionUtil::ts('Entity Table b'),
          'description' => CRM_RelateEntities_ExtensionUtil::ts('May contain civicrm_financial_item, civicrm_contribution, civicrm_financial_trxn, civicrm_grant, etc'),
          'required' => TRUE,
          'maxlength' => 64,
          'size' => CRM_Utils_Type::BIG,
          'where' => 'civicrm_relate_entities.entity_table_b',
          'table_name' => 'civicrm_relate_entities',
          'entity' => 'RelateEntities',
          'bao' => 'CRM_RelateEntities_DAO_RelateEntities',
          'localizable' => 0,
        ],
        'entity_id_b' => [
          'name' => 'entity_id_b',
          'type' => CRM_Utils_Type::T_INT,
          'title' => CRM_RelateEntities_ExtensionUtil::ts('Entity Id B'),
          'description' => CRM_RelateEntities_ExtensionUtil::ts('entry in table'),
          'required' => TRUE,
          'where' => 'civicrm_relate_entities.entity_id_b',
          'table_name' => 'civicrm_relate_entities',
          'entity' => 'RelateEntities',
          'bao' => 'CRM_RelateEntities_DAO_RelateEntities',
          'localizable' => 0,
        ],
        'relationship_type_id' => [
          'name' => 'relationship_type_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => CRM_RelateEntities_ExtensionUtil::ts('Relationship Type'),
          'description' => CRM_RelateEntities_ExtensionUtil::ts('id of the relationship'),
          'required' => TRUE,
          'where' => 'civicrm_relate_entities.relationship_type_id',
          'table_name' => 'civicrm_relate_entities',
          'entity' => 'RelateEntities',
          'bao' => 'CRM_RelateEntities_DAO_RelateEntities',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
          ],
        ],
        'is_active' => [
          'name' => 'is_active',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => CRM_RelateEntities_ExtensionUtil::ts('Relationship Is Active'),
          'description' => CRM_RelateEntities_ExtensionUtil::ts('is the relationship active ?'),
          'where' => 'civicrm_relate_entities.is_active',
          'default' => '1',
          'table_name' => 'civicrm_relate_entities',
          'entity' => 'RelateEntities',
          'bao' => 'CRM_RelateEntities_DAO_RelateEntities',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
        ],
        'created_date' => [
          'name' => 'created_date',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => CRM_RelateEntities_ExtensionUtil::ts('RelateEntities Created Date'),
          'description' => CRM_RelateEntities_ExtensionUtil::ts('When was the entry was created.'),
          'required' => FALSE,
          'where' => 'civicrm_relate_entities.created_date',
          'export' => TRUE,
          'default' => 'CURRENT_TIMESTAMP',
          'table_name' => 'civicrm_relate_entities',
          'entity' => 'RelateEntities',
          'bao' => 'CRM_RelateEntities_DAO_RelateEntities',
          'localizable' => 0,
        ],
        'modified_date' => [
          'name' => 'modified_date',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => CRM_RelateEntities_ExtensionUtil::ts('RelateEntities Modified Date'),
          'description' => CRM_RelateEntities_ExtensionUtil::ts('When was the entry was modified.'),
          'required' => FALSE,
          'where' => 'civicrm_relate_entities.modified_date',
          'export' => TRUE,
          'default' => 'CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP',
          'table_name' => 'civicrm_relate_entities',
          'entity' => 'RelateEntities',
          'bao' => 'CRM_RelateEntities_DAO_RelateEntities',
          'localizable' => 0,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'relate_entities', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'relate_entities', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
